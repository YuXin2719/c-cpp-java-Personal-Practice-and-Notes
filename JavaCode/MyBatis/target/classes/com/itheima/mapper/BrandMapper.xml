<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->
<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--
    数据库表的字段名称 和 实体类的属性名称 不一样,则不能自动封装数据
        * 起别名 : 对不一样的列名起别名,让别名和实体类的属性名一样
            * 缺点 : 每次查询都要定义一次别名
                * 使用 sql片段 解决问题
                    *缺点 : 不灵活
        * resultMap:
            1.定义<resultMap>标签
            2.在<select>标签中,使用resultMap属性替换resultType属性
    -->
    <!--
    id:唯一标识
    type:映射的类型,支持别名
    -->
    <!--自动完成别名映射-->
    <resultMap id="brandResultMap" type="brand">
        <!--
        id:完成主键字段的映射
            column:表的列名
            property:实体类的属性名
        result:完成一般字段的映射
            column:表的列名
            property:实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        select * from tb_brand;
    </select>

    <!--
        sql片段
    -->
    <!--    <sql id="brand_column">-->
    <!--        id,brand_name as brandName,company_name as companyName,ordered,description,status-->
    <!--    </sql>-->

    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select-->
    <!--        <include refid="brand_column"/>-->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select * from tb_brand;-->
    <!--    </select>-->


    <!--
    * 参数占位符:
        1.#{}:会将其替换为 ?,为了防止SQL注入
        2.${}:直接拼接SQL,会存在SQL注入问题
                TODO 所以最好使用 #{}
        3.使用时机:
            * 参数传递的时候:#{}
            * 表名或者列名不固定的情况下:${} (不常用)

    * 参数类型: parameterType:可以省略(一般也没人写)
    * 特殊字符的处理:
        1.转义字符:需要替换的符号比较少的时候可以用,例如 < 就需要替换成 &lt;
        2.CDATA区:如下演示,当替换的字符较多时,全部放到CDATA区就可以了
    -->
    <!--    <select id="selectByIdBrand" resultMap="brandResultMap">-->
    <!--        select * from tb_brand where id=#{id};-->
    <!--    </select>-->

    <select id="selectByIdBrand" resultMap="brandResultMap">
        select * from tb_brand where id
        <![CDATA[
            <
        ]]>
        #{id};
    </select>

    <!--
    条件查询
    -->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where-->
    <!--        status = #{status}-->
    <!--        and company_name like #{companyName}-->
    <!--        and brand_name like #{brandName}-->
    <!--    </select>-->

    <!--
    动态条件查询
        * if : 条件判断
            * test : 逻辑表达式
        * 问题 :
            * 恒等式
            * MyBatis提供的where标签 <where> 替换 where 关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <!--where 1=1-->
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>

    </select>

</mapper>