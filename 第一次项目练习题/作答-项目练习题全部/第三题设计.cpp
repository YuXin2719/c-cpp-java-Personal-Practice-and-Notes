#include <iostream>
#include <string>

using namespace std;

//------------------ 数据设计 ---------------------
/*
	地图：
	map[i][j]表示坐标(i,j)的值
	0表示空地
	1表示箱子
	2表示障碍
	3表示小人
	4表示目标地点（将箱子推进目标地点即胜利）
*/
int map[20][20] = 0; //地图总大小 20 * 20

//地图初始设计：仅演示，地图不确定是否合理
const int map[19][19] = 4;  //目标点
const int map[0][0] = 2;  //障碍
int map[0][1] = 3;  //小人
int* man = map[0][1]; //man指向小人位置
int map[1][1] = 1;  //箱子
int* box = map[1][1]; //box指向箱子位置

//表示步数，类似回合
//如：steps = 20 表示当前小人走了20步
int steps;

//创建排行榜结构体
struct MVP
{
	string name;
	int steps;
};
//创建结构体数组
MVP mvp[10];

//创建一个玩家称呼临时存放
string player;

//------------------ 数据设计 ---------------------



//------------------- service ---------------------
/*
	负责人：张三
	功能：初始化游戏数据
		将游戏地图（空地和障碍）、小人位置、箱子位置、目标点恢复默认
		当前步数设为0（steps设为0）
	参数：void
	返回值：void
*/
void init();

/*
	负责人：张三
	功能：根据传入的箱子的指针是否指向目标点 判断是否获胜
	参数：
	*box 是箱子的指针
	返回值：
		0表示未获胜
		1表示玩家成功，箱子已经到达目标位置
*/
int isWin(int* box);


/*
	负责人：张三
	功能：操纵小人移动（确定小人行进方向可行）
	小人位置当前位置map[x][y]
	小人下一步移动-举例：
	小人向右移动如果map[x+1][y]是空地 则将小人指针指向这个空地
				如果map[x+1][y]是箱子 则要确定map[x+2][y]是不是空地或者目标点，如果不是则移动失败
				如果map[x+1][y]是障碍物或者图外，则移动失败
参数：
	manDirect
	1表示向上移动
	2表示向左移动
	3表示向右移动
	4表示向下移动
返回值：
	0表示移动失败（出界或者有障碍物）
	1表示向上移动
	2表示向左移动
	3表示向右移动
	4表示向下移动
*/
int manMove(int manDirect); 


/*
	负责人：张三
	功能：在需要时让箱子被小人推走（确定箱子是否被推，并且确定推动方向是否可行）
		确认一下小人要移动的位置有没有箱子，如果有↓
		箱子如何移动-举例：小人的位置为x y，箱子在x+1，y；小人向右移动，则箱子box指针指向map[x+2][y]
							同时注意箱子要移动的位置是否出界或者碰到障碍物(该要求小人移动函数已做限制，此处可以不做限制)
		小人移动位置没有箱子就是箱子移动失败
	参数：
		manDirect：小人移动的方向 manMove的返回值
	返回值：
	0表示移动失败（出界或者有障碍物或小人没推）
	1表示向上移动
	2表示向左移动
	3表示向右移动
	4表示向下移动
*/
int boxMove(int manDirect);
//------------------- service ---------------------



//--------------------- view -----------------------
/*
	功能：展示选项，玩家可以通过这里选择进入游戏，进入设置或者退出游戏
		选关界面：第一个选项提示演示关卡就一关并可以继续进入游戏
						提示输入玩家称呼，并将称呼暂时存放在 player
						调用游戏界面函数gameView();
				选关界面第二个选项 提示可以返回主菜单 goto
		进入设置：敬请期待...
		排行榜：先将排行榜数组按步数多少冒泡排序，然后按顺序打印玩家称呼和步数  //！！！！！！！！！！！我没记住题目，原来不用做......
		退出游戏：调用exit(0);
*/
void menuView();


/*
	负责人：
	功能：根据map数组 打印游戏地图
		障碍和目标点不变
		注意刷新小人，箱子，和空地
		先刷新空地
		然后通过指针刷新小人，箱子
	参数：void
	返回值：void
*/
void gameView_gameMap();


/*
	负责人：张三
	功能：使用steps值 打印游戏胜利界面 用户可以按任意键返回菜单
	参数：void
	返回值：void
*/
void winView();


/*
	负责人：张三
	功能：游戏界面整合
		初始化游戏数据(调用函数init())
		while(1){
			打印游戏界面(调用函数gameView_gameMap())
			接收玩家方向输入

		小人先移动(调用小人移动函数manMove())
					(根据manMove返回值修改小人指针指向)
					(如果小人移动失败，重新移动）
		
		箱子可能被动移动(调用箱子移动函数boxMove())
					(根据boxMove返回值修改箱子指针指向)

		判断游戏是否胜利(调用胜利判断函数isWin())
					(如果游戏胜利 调用胜利界面函数winView() 然后结束当前界面)
					(此时将玩家称呼和步数放入排行榜数组)
					(如果排行榜数组10个成员已满，则将本次步数和排行榜步数最多的成员对比，如果本次步数少就把排行榜步数最多的成员替换，成员名称在player中存放，步数就是本局步数)
					(修改步数)
		询问是否要回到主菜单，如果需要break出去
		}
*/
void gameView();
//--------------------- view -----------------------

int main()
{
	//测试代码省略
	return 0;
}