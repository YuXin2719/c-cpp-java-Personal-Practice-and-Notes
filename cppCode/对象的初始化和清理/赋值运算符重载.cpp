//#include <iostream>
//using namespace std;
//
////赋值运算符重载
//
//class Person
//{
//public:
//
//	Person(int age) //把数据创建在堆区
//	{
//		m_Age = new int(age);
//	}
//
//	~Person()
//	{
//		if (m_Age != NULL)
//		{
//			delete m_Age; //删除内存块的信息
//			m_Age = NULL; //指向空指针
//		}
//	}
//
//	//重载赋值运算符
//	Person& operator=(Person &p) //不能用Person，因为返回的是利用拷贝构造函数构造的值，用引用返回的才是真正的自身
//	{
//
//		if (&p == this) //判断出现自赋值的情况，如p1 = p1
//		{
//			return p;
//		}
//
//		//编译器提供的浅拷贝
//		//m_Age = p.m_Age;
//
//		//应该先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝
//		if (m_Age != NULL)
//		{
//			delete m_Age;
//			m_Age = NULL;
//		}
//
//		m_Age = new int(*p.m_Age);
//	
//		//返回对象本身
//		return *this;
//	}
//
//	int* m_Age;
//};
//
//void test01()
//{
//	Person p1(18);
//
//	Person p2(20);
//
//	Person p3(30);
//
//	p3 = p2 = p1; //赋值操作
//
//	p1 = p1;
//
//	cout << "p1的年龄为：" << *p1.m_Age << endl;
//
//	cout << "p2的年龄为：" << *p2.m_Age << endl;
//
//	cout << "p3的年龄为：" << *p3.m_Age << endl;
//}
//
//int main()
//{
//
//	test01();
//
//	//int a = 10;
//	//int b = 20;
//	//int c = 30;
//
//	//c = b = a;
//
//	//cout << "a = " << a << endl;
//	//cout << "b = " << b << endl;
//	//cout << "c = " << c << endl;
//
//	system("pause");
//	return 0;
//}